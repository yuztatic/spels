php.ini
- extension=intl
- extension=zip

httpd.conf
-Rewrite_module modules/mod_rewrite.so

go to htdocs directory in cmd
install codeigniter famework
-composer create-project codeigniter4/appstarter spels

visual studio code
open project in vs code
go to directory spels
code .

vs code extensions
PHP Debug
PHP Intelephense
PHP Extension Pack
PHP IntelliSense

HTML Boilerplate
HTML CSS Support

Database Client- Weijan Chen

Thunder Client

Bootstrap 4 5, FOnt awesome 4, Font Awesome 5

icons for vs code

---------------

rename env file to .env

# CI_ENVIRONMENT = production to # CI_ENVIRONMENT = development
then remove #

app.baseURL = 'http://localhost/spels'

next in public folder htaccess and index.php drag to outside directory with env file

or php spark serve --port 8000 --host 0.0.0.0
app.baseURL = 'http://localhost:8000'



in index.php remove ../
require FCPATH . '../app/Config/Paths.php'; to require FCPATH . 'app/Config/Paths.php';



----------------
php spark list
php spark make:controller --help

php spark make:controller OfficeController --restful


---------------------
install git
git bash

commands

git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/yuztatic/laravel.git
git push -u origin main



if all files
git add -f .
The -f flag stands for "force" and it tells Git to add the files even if they are ignored.
git commit -m "Committing all files, including ignored ones"
git push origin master

------------------------------------

data base config

database.default.hostname = localhost
database.default.database = spels
database.default.username = root
database.default.password =
database.default.DBDriver = MySQLi
database.default.DBPrefix =
database.default.port = 3306



 git commit -am "added db connection"
git push origin main

---------------------

create connection in database extension
name : MYSQL LOCAL
host: localhost
username: root
port: as is
password: ""

then click connect.
wag save.


filldb.info
generate
import to vscode

-------------------

try builder code in home controller
	auto generated ito by codeium

       $db= \Config\Database::connect();
       $builder = $db->table('authors');
       $query = $builder->get();
       $result = $query->getResult();
       return json_encode($result);


then install json viewer


------------------------------
query builder samples
$db = \Config\Database::connect();
        $builder = $db->table('authors');

        // $query = $builder->get(); 
        // SELECT * FROM authors;

        // $query = $builder->getWhere(['id' => 1]);
        // SELECT * FROM authors WHERE id = 1;

        // $query = $builder->select('id, first_name')->get();
        // SELECT id, first_name FROM authors;

        // $query = $builder->select('id,first_name,last_name, CONCAT(first_name, " ", last_name) as fullname')->get();
        // $query = $builder->select('id,first_name,last_name, CONCAT(first_name, " ", last_name) as fullname')->where('id', 1)->get();

        // $sql = "CONCAT(first_name, ' ', last_name) as fullname";

        // $builder->select(new RawSql($sql));
        // $query = $builder->get();
        // SELECT CONCAT(first_name, ' ', last_name) as fullname FROM authors;

        // MAX, MIN, AVG, COUNT, SUM
        // $builder->selectMax('id');
        // $query = $builder->get();
        // SELECT MAX(id) FROM authors;

        // $builder->selectMin('id');
        // $query = $builder->get();
        // SELECT MIN(id) FROM authors;

        // $builder->selectAvg('id');
        // $query = $builder->get();
        // SELECT AVG(id) FROM authors;

        // $builder->selectSum('id');
        // $query = $builder->get();
        // SELECT SUM(id) FROM authors;

        // $builder->selectCount('id');
        // $query = $builder->get();
        // SELECT COUNT(id) FROM authors;


        // $builder->select("posts.*, CONCAT(authors.first_name, ' ', authors.last_name) as fullname");
        // $builder->join("posts", "posts.author_id = authors.id");
        // $query = $builder->get();

        // SELECT posts.*, CONCAT(authors.first_name, ' ', authors.last_name) as author_name FROM authors JOIN posts ON posts.author_id = authors.id;

        // $builder->select('*');
        // $builder->where('first_name','Luisa');
        // $query = $builder->get();
        // SELECT * FROM authors WHERE first_name = 'Luisa';

        // $builder->select('*');
        // $builder->where('first_name','Luisa');
        // $builder->where('last_name','Hyatt');
        // $query = $builder->get();
        // SELECT * FROM authors WHERE first_name = 'Luisa' AND last_name = 'Hyatt';

        // $builder->select('*');
        // $builder->where('first_name','Luisa');
        // $builder->orWhere('last_name','Hyatt');
        // $query = $builder->get();
        // SELECT * FROM authors WHERE first_name = 'Luisa' OR last_name = 'Hyatt';

        // $builder->select('*');
        // $builder->where('id',1);
        // $builder->orWhere('id',3);
        // $query = $builder->get();
        // SELECT * FROM authors WHERE id = 1 OR id = 3;

        // $builder->select('*');
        // $builder->where('id >',1);
        // $query = $builder->get();
        // SELECT * FROM authors WHERE id > 1;

        // $builder->select('*');
        // $builder->where('id >=',1);
        // $query = $builder->get();
        // SELECT * FROM authors WHERE id >= 1;

        // $builder->select('*');
        // $builder->where('id <=',2);
        // $query = $builder->get();
        // SELECT * FROM authors WHERE id <= 2;

        // $builder->select('*');
        // $builder->whereIn('id',[1,2,3]);
        // $query = $builder->get();
        // SELECT * FROM authors WHERE id IN (1,2,3);

        // $builder->select('*');
        // $builder->whereNotIn('id',[1,2,3]);
        // $query = $builder->get();
        // SELECT * FROM authors WHERE id NOT IN (1,2,3);

        // $builder->select('*');
        // $builder->like('first_name','ama');
        // $query = $builder->get();
        // SELECT * FROM authors WHERE first_name LIKE '%ama%';

        // $builder->select('*');
        // $builder->like('first_name','art');
        // $builder->orLike('last_name','art');
        // $query = $builder->get();
        // SELECT * FROM authors WHERE first_name LIKE '%ama%' OR last_name LIKE '%ama%';

        // $builder->select('*');
        // $builder->orderBy('id','DESC'); //ASC
        // $query = $builder->get();
        // SELECT * FROM authors ORDER BY id DESC;

        // $builder->select('last_name, COUNT(*) as total');
        // $builder->groupBy('last_name'); //ASC
        // $query = $builder->get();
        // SELECT last_name, COUNT(*) as total FROM authors GROUP BY last_name;

        // $data = [
        //     'first_name' => 'RUFINO JOHN',
        //     'last_name' => 'AGUILAR',
        //     'email' => 'aguilarufino@gmail.com',
        //     'birthdate' => '1990-01-01',
        //     'added' => date('Y-m-d H:i:s')  
        // ];

        // $builder->insert($data);

        // $builder->select('*');
        // $builder->where('first_name','RUFINO JOHN');
        // $query = $builder->get();

        // $data = [
        //     'first_name' => 'RUFINO',
        // ];

        // $builder->where('id',101);
        // $builder->update($data);

        // $builder->select('*');
        // $builder->where('id',101);
        // $query = $builder->get();

        // $builder->where('id',101);
        // $builder->delete();
        

        // $builder->select('*');
        // $builder->where('id',101);
        // $query = $builder->get();


        // $result = $query->getResult();
        // return json_encode($result);
        
-------------------------------


_________________________________
create model

php spark make:model Office

set fields
 protected $allowedFields    = [
        'code',
        'name',
        'email '
    ];

set validation

    // Validation
    protected $validationRules      = [
        'code' => 'required|min_length[3]|max_length[255]',
        'name' => 'required|min_length[3]|max_length[255]',
        'email' => 'required|valid_email|min_length[3]|max_length[255]'
    ];


create the migration

php spark make:migration OfficeTable

set up and down function

  public function up()
    {
        $fields = [
            
        'name' => [
            'type' => 'VARCHAR',
            'constraint' => 255,
            'null' => false,
        ],
        'code' => [
            'type' => 'VARCHAR',
            'constraint' => 255,
            'null' => false,

        ],
        'email' => [
            'type' => 'VARCHAR',
            'constraint' => 255,
            'null' => false,
        ],
        'created_at' => [
            'type' => 'TIMESTAMP',
            'null' => false,
        ],
        'updated_at' => [
            'type' => 'TIMESTAMP',
            'null' => true,
        ]
        ];

        $this->forge->addField($fields);
        $this->forge->addPrimaryKey('id', true);
        $this->forge->createTable('offices');
        //
    }

    public function down()
    {
        $this->forge->dropTable('offices');
    }



    after that run migration

    php spark migrate
_________________________________

seeding

php spark make:seeder OfficeSeeder


 public function run()
    {
        $data = [
            [
            'code' => 'RJ',
            'name' => 'RJ',
            'email' => 'rj@rj.com',
            'created_at'=>date('Y-m-d H:i:s'),
            'updated_at'=>date('Y-m-d H:i:s'),
            ],
            [
            'code' => 'SP',
            'name' => 'SP',
            'email' => 'sp@sp.com',
            'created_at'=>date('Y-m-d H:i:s'),
            'updated_at'=>date('Y-m-d H:i:s'),
            ],
            [
            'code' => 'MG',
            'name' => 'MG',
            'email' => 'mg@mg.com',
            'created_at'=>date('Y-m-d H:i:s'),
            'updated_at'=>date('Y-m-d H:i:s'),
            ],
            [
                'code'=>'PGSO',
                'name'=>'PGSO',
                'email'=>'pgso@pgso.com',
                'created_at'=>date('Y-m-d H:i:s'),
                 'updated_at'=>date('Y-m-d H:i:s'),

            ]


            ];


            $this->db->table('OfficeTable')->insertBatch($data);
    }


    run seeder

    php spark db:seed OfficeSeeder
----------------------------------
_________________________________
user authentication
login 

codeigniter shield
passportjs.org
jwt

composer config minimum-stability dev

composer require codeigniter4/shield:dev-develop

php spark shield:setup


  Created: APPPATH\Config/Auth.php
  Created: APPPATH\Config/AuthGroups.php
  Created: APPPATH\Config/AuthToken.php
  Updated: APPPATH\Config\Autoload.php
  Updated: APPPATH\Config\Routes.php
  Updated: We have updated file 'APPPATH\Config\Security.php' for security reasons.
  The required Config\Email::$fromEmail is not set. Do you set now? [y, n]: y
  What is your email? : juliusmanipol@gmail.com
  The required Config\Email::$fromName is not set. Do you set now? [y, n]: y
  What is your name? : julius manipol
  Updated: APPPATH\Config\Email.php
  Run `spark migrate --all` now? [y, n]: y
Running all new migrations...
        Running: (CodeIgniter\Shield) 2020-12-28-223112_CodeIgniter\Shield\Database\Migrations\CreateAuthTables
        Running: (CodeIgniter\Settings) 2021-07-04-041948_CodeIgniter\Settings\Database\Migrations\CreateSettingsTable      
        Running: (CodeIgniter\Settings) 2021-11-14-143905_CodeIgniter\Settings\Database\Migrations\AddContextColumn
Migrations complete.




_________________________________



ticket
make ng controller
then make model
in model lagyan yung fields

    protected $allowedFields    = [

        'first_name',
        'last_name',
        'email',
        'office_id',
        'state',
        'severity',
        'description',
        'remarks'
    ];

    tapos enable TIMESTAMP
      // Dates
    protected $useTimestamps = true;

    tapos validation validationRules
        // Validation
    protected $validationRules      = [

        'first_name' => 'required|min_length[3]|max_length[255]',
        'last_name' => 'required|min_length[3]|max_length[255]',
        'email' => 'required|valid_email|min_length[3]|max_length[255]',
        'office_id' => 'required',
        'state' => 'required',
        'severity' => 'required',
        'description' => 'required',
        'remarks' => 'required' 
    ];


    tapos make migration
    unang una gagawa ng fields

    after set ng fields call forge class

        $this->forge->addField($fields);
        $this->forge->addPrimaryKey('id');
        $this->forge->addFOreignKey('office_id', 'officetable', 'id', 'CASCADE', 'CASCADE');
         papunta sa offices table, tapos on update on delete cascade

        then sa down dropt table  
         public function down()
    {
        $this->forge->dropTable('tickettable');
    }
}